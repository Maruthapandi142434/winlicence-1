generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum BlogStatus {
  draft
  published
  scheduled
}

enum UserRole {
  admin
  editor
  author
}

model AdminUser {
  id        Int      @id @default(autoincrement())
  username  String   @unique @db.VarChar(50)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  role      UserRole @default(author)

  @@map("admin_users")
}

model BlogCategory {
  id        Int         @id @default(autoincrement())
  name      String      @unique @db.VarChar(100)
  slug      String      @unique @db.VarChar(100)
  createdAt DateTime    @default(now()) @map("created_at")
  posts     BlogPost[]

  @@map("blog_categories")
}

model BlogPost {
  id            Int           @id @default(autoincrement())
  title         String        @db.VarChar(255)
  slug          String        @unique @db.VarChar(255)
  excerpt       String?       @db.Text
  content       String?       @db.LongText
  category      String?       @db.VarChar(100)
  featuredImage String?       @map("featured_image") @db.VarChar(255)
  author        String?       @db.VarChar(100)
  published     Boolean       @default(false)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  scheduledFor  DateTime?     @map("scheduled_for")
  status        BlogStatus    @default(draft)
  categoryId    Int?          @map("category_id")
  categoryRel   BlogCategory? @relation(fields: [categoryId], references: [id])
  blogPostTags  BlogPostTag[]
  postTags      PostTag[]

  @@map("blog_posts")
}

model BlogTag {
  id        Int           @id @default(autoincrement())
  name      String        @unique @db.VarChar(50)
  slug      String        @unique @db.VarChar(50)
  createdAt DateTime      @default(now()) @map("created_at")
  blogPostTags BlogPostTag[]
  postTags      PostTag[]

  @@map("blog_tags")
}

model BlogPostTag {
  id     Int      @id @default(autoincrement())
  post   BlogPost @relation(fields: [postId], references: [id])
  postId Int @map("post_id")
  tag    BlogTag  @relation(fields: [tagId], references: [id])
  tagId  Int @map("tag_id")

  @@map("blog_post_tags")
}

model PostTag {
  post   BlogPost @relation(fields: [postId], references: [id])
  postId Int
  tag    BlogTag  @relation(fields: [tagId], references: [id])
  tagId  Int

  @@id([postId, tagId])
  @@map("post_tags")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  orders    InitiatedOrder[]
  name      String?
  mobile    String?
  company   String?

  @@map("user")
}

enum OrderStatus {
  PENDING
  PROCESSING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model InitiatedOrder {
  id         Int      @id @default(autoincrement())
  name       String?  @db.VarChar(100)
  email      String?  @db.VarChar(100)
  phone      String?  @db.VarChar(20)
  company    String?  @db.VarChar(100)
  subject    String?  @db.VarChar(255)
  product    String?  @db.VarChar(100)
  package    String?  @db.VarChar(100)
  billing    String?  @db.VarChar(50)
  quantity   Int?
  total      Decimal? @db.Decimal(10,2)
  licenseType String? @map("license_type") @db.VarChar(50)
  cores      String?  @db.VarChar(20)
  productId  Int?     @map("product_id")
  createdAt  DateTime @default(now()) @map("created_at")
  userId     Int?
  user       User?    @relation(fields: [userId], references: [id])
  status     OrderStatus @default(PENDING)
  purchasedAt DateTime?
  renewalAt   DateTime?
  paymentStatus PaymentStatus @default(PENDING)

  @@map("initiated_orders")
}

model PageMetadata {
  id                  Int      @id @default(autoincrement())
  pageSlug            String   @map("page_slug") @db.VarChar(255)
  title               String   @db.VarChar(255)
  description         String   @db.Text
  canonicalUrl        String?  @map("canonical_url") @db.VarChar(255)
  ogTitle             String?  @map("og_title") @db.VarChar(255)
  ogDescription       String?  @map("og_description") @db.Text
  ogImage             String?  @map("og_image") @db.VarChar(255)
  ogUrl               String?  @map("og_url") @db.VarChar(255)
  articleModifiedTime DateTime? @map("article_modified_time")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@unique([pageSlug])
  @@map("page_metadata")
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  description String?  @db.Text
  rolePermissions RolePermission[]

  @@map("permissions")
}

enum Role {
  admin
  editor
  author
}

model RolePermission {
  role         Role     @map("role")
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@id([role, permissionId])
  @@map("role_permissions")
}

model ProductSchema {
  id                  Int      @id @default(autoincrement())
  slug                String   @unique @db.VarChar(255)
  name                String   @db.VarChar(255)
  imageUrl            String?  @map("image_url") @db.VarChar(255)
  description         String?  @db.Text
  category            String?  @db.VarChar(100)
  year                String?  @db.VarChar(20)
  features            Json?
  schemaBrand         String?  @map("schema_brand") @db.VarChar(100)
  schemaSku           String?  @map("schema_sku") @db.VarChar(100)
  schemaPrice         Decimal? @map("schema_price") @db.Decimal(10,2)
  schemaPriceCurrency String?  @map("schema_price_currency") @db.VarChar(10)
  schemaPriceValidUntil DateTime? @map("schema_price_valid_until")
  isActive            Boolean  @default(true) @map("is_active")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@map("product_schema")
}

model EmailOTP {
  id        Int      @id @default(autoincrement())
  email     String
  otp       String
  type      String   // 'register' or 'reset'
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("emailotp")
} 